"""
Telegram –±–æ—Ç –¥–ª—è –≥—Ä–∏ "–î—É—Ä–∞–∫" (–ü—ñ–¥–∫–∏–¥–Ω–∏–π)
–î–ª—è Render.com
"""

import logging
import random
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import F
import asyncio

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—É –∑ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è
BOT_TOKEN = os.getenv("BOT_TOKEN")

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –î–æ–¥–∞–π—Ç–µ –π–æ–≥–æ –≤ Environment Variables –Ω–∞ Render")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ú–∞—Å—Ç—ñ —Ç–∞ –Ω–æ–º—ñ–Ω–∞–ª–∏ –∫–∞—Ä—Ç
SUITS = ['‚ô†Ô∏è', '‚ô•Ô∏è', '‚ô¶Ô∏è', '‚ô£Ô∏è']
RANKS = ['6', '7', '8', '9', '10', '–í', '–î', '–ö', '–¢']
RANK_VALUES = {'6': 6, '7': 7, '8': 8, '9': 9, '10': 10, '–í': 11, '–î': 12, '–ö': 13, '–¢': 14}

# –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —ñ–≥–æ—Ä
games = {}

class Card:
    def __init__(self, rank, suit):
        self.rank = rank
        self.suit = suit
        self.value = RANK_VALUES[rank]
    
    def __str__(self):
        return f"{self.rank}{self.suit}"
    
    def __repr__(self):
        return self.__str__()

class DurakGame:
    def __init__(self, player_id):
        self.player_id = player_id
        self.deck = self.create_deck()
        random.shuffle(self.deck)
        
        # –ö–æ–∑–∏—Ä–Ω–∞ –∫–∞—Ä—Ç–∞
        self.trump_card = self.deck.pop()
        self.trump_suit = self.trump_card.suit
        self.deck.insert(0, self.trump_card)
        
        # –†–æ–∑–¥–∞—á–∞ –∫–∞—Ä—Ç
        self.player_hand = [self.deck.pop() for _ in range(6)]
        self.bot_hand = [self.deck.pop() for _ in range(6)]
        
        # –°—Ç—ñ–ª (–∫–∞—Ä—Ç–∏ –≤ –≥—Ä—ñ)
        self.table = []  # [(–∞—Ç–∞–∫—É—é—á–∞_–∫–∞—Ä—Ç–∞, –∑–∞—Ö–∏—Å–Ω–∞_–∫–∞—Ä—Ç–∞ –∞–±–æ None)]
        
        # –ß–µ—Ä–≥–∞ —Ö–æ–¥—É
        self.player_turn = self.who_starts()
        self.stage = "attack"  # attack, defend, throw_in
        self.attacker_can_throw = False
        
    def create_deck(self):
        """–°—Ç–≤–æ—Ä—é—î –∫–æ–ª–æ–¥—É –∑ 36 –∫–∞—Ä—Ç"""
        return [Card(rank, suit) for suit in SUITS for rank in RANKS]
    
    def who_starts(self):
        """–í–∏–∑–Ω–∞—á–∞—î —Ö—Ç–æ —Ö–æ–¥–∏—Ç—å –ø–µ—Ä—à–∏–º (—É –∫–æ–≥–æ –º–µ–Ω—à–∏–π –∫–æ–∑–∏—Ä)"""
        player_trumps = [c for c in self.player_hand if c.suit == self.trump_suit]
        bot_trumps = [c for c in self.bot_hand if c.suit == self.trump_suit]
        
        if not player_trumps and not bot_trumps:
            return True  # –ì—Ä–∞–≤–µ—Ü—å –ø–æ—á–∏–Ω–∞—î
        elif not bot_trumps:
            return True
        elif not player_trumps:
            return False
        
        return min(player_trumps, key=lambda x: x.value).value < min(bot_trumps, key=lambda x: x.value).value
    
    def can_beat(self, attacking_card, defending_card):
        """–ß–∏ –º–æ–∂–µ –∑–∞—Ö–∏—Å–Ω–∞ –∫–∞—Ä—Ç–∞ –ø–æ–±–∏—Ç–∏ –∞—Ç–∞–∫—É—é—á—É"""
        if defending_card.suit == attacking_card.suit:
            return defending_card.value > attacking_card.value
        return defending_card.suit == self.trump_suit
    
    def get_valid_attacks(self, hand):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –≤–∞–ª—ñ–¥–Ω—ñ –∫–∞—Ä—Ç–∏ –¥–ª—è –∞—Ç–∞–∫–∏/–ø—ñ–¥–∫–∏–¥–∞–Ω–Ω—è"""
        if not self.table:
            return hand  # –ü–µ—Ä—à–∏–π —Ö—ñ–¥ - –±—É–¥—å-—è–∫–∞ –∫–∞—Ä—Ç–∞
        
        # –ú–æ–∂–Ω–∞ –ø—ñ–¥–∫–∏–¥–∞—Ç–∏ –∫–∞—Ä—Ç–∏ —Ç–æ–≥–æ –∂ –Ω–æ–º—ñ–Ω–∞–ª—É, —â–æ —î –Ω–∞ —Å—Ç–æ–ª—ñ
        table_ranks = set()
        for attack, defend in self.table:
            table_ranks.add(attack.rank)
            if defend:
                table_ranks.add(defend.rank)
        
        return [c for c in hand if c.rank in table_ranks]
    
    def refill_hands(self):
        """–ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è —Ä—É–∫ –ø—ñ—Å–ª—è —Ä–∞—É–Ω–¥—É"""
        # –°–ø–æ—á–∞—Ç–∫—É –∞—Ç–∞–∫—É—é—á–∏–π
        attacker_hand = self.player_hand if self.player_turn else self.bot_hand
        defender_hand = self.bot_hand if self.player_turn else self.player_hand
        
        while len(attacker_hand) < 6 and self.deck:
            attacker_hand.append(self.deck.pop())
        
        while len(defender_hand) < 6 and self.deck:
            defender_hand.append(self.deck.pop())
    
    def game_over(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –≥—Ä–∏"""
        if not self.deck:
            if not self.player_hand:
                return "player_win"
            if not self.bot_hand:
                return "bot_win"
        return None

def format_hand(cards):
    """–§–æ—Ä–º–∞—Ç—É—î –∫–∞—Ä—Ç–∏ –≤ —Ä—É—Ü—ñ"""
    return " ".join([str(card) for card in cards])

def format_table(table):
    """–§–æ—Ä–º–∞—Ç—É—î –∫–∞—Ä—Ç–∏ –Ω–∞ —Å—Ç–æ–ª—ñ"""
    if not table:
        return "–°—Ç—ñ–ª –ø–æ—Ä–æ–∂–Ω—ñ–π"
    
    result = []
    for i, (attack, defend) in enumerate(table, 1):
        if defend:
            result.append(f"{attack} ‚Üê {defend}")
        else:
            result.append(f"{attack} ‚Üê ?")
    return "\n".join(result)

def create_card_keyboard(cards, action_prefix):
    """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–∞—Ä—Ç–∞–º–∏"""
    keyboard = []
    row = []
    for i, card in enumerate(cards):
        row.append(InlineKeyboardButton(
            text=str(card),
            callback_data=f"{action_prefix}_{i}"
        ))
        if len(row) == 4:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

async def send_game_state(chat_id, game, message=""):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –≥—Ä–∏"""
    status = f"üÉè **–ì—Ä–∞ '–î—É—Ä–∞–∫'**\n\n"
    status += f"üé¥ –ö–æ–∑–∏—Ä: {game.trump_card}\n"
    status += f"üìö –ö–∞—Ä—Ç —É –∫–æ–ª–æ–¥—ñ: {len(game.deck)}\n\n"
    status += f"**–ù–∞ —Å—Ç–æ–ª—ñ:**\n{format_table(game.table)}\n\n"
    status += f"ü§ñ –ö–∞—Ä—Ç —É –±–æ—Ç–∞: {len(game.bot_hand)}\n"
    status += f"üë§ –í–∞—à—ñ –∫–∞—Ä—Ç–∏: {format_hand(game.player_hand)}\n\n"
    
    if message:
        status += f"üì¢ {message}\n\n"
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –¥—ñ—ó
    keyboard = None
    
    if game.player_turn and game.stage == "attack":
        status += "‚öîÔ∏è **–í–∞—à —Ö—ñ–¥ - –∞—Ç–∞–∫—É–π—Ç–µ!**"
        valid_cards = game.get_valid_attacks(game.player_hand)
        if valid_cards:
            keyboard = create_card_keyboard(valid_cards, "attack")
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ö—ñ–¥", callback_data="end_attack")
            ])
    
    elif not game.player_turn and game.stage == "defend":
        status += "üõ°Ô∏è **–í–∞—à —Ö—ñ–¥ - –∑–∞—Ö–∏—â–∞–π—Ç–µ—Å—å!**"
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–µ—Ä—à—É –Ω–µ–∑–∞—Ö–∏—â–µ–Ω—É –∫–∞—Ä—Ç—É
        undefended = None
        for i, (attack, defend) in enumerate(game.table):
            if defend is None:
                undefended = (i, attack)
                break
        
        if undefended:
            idx, attack_card = undefended
            valid_defends = [c for c in game.player_hand if game.can_beat(attack_card, c)]
            if valid_defends:
                status += f"\nüéØ –í—ñ–¥–±–∏–π—Ç–µ: {attack_card}"
                keyboard = create_card_keyboard(valid_defends, f"defend_{idx}")
            
            keyboard_buttons = keyboard.inline_keyboard if keyboard else []
            keyboard_buttons.append([
                InlineKeyboardButton(text="‚ùå –ë–µ—Ä—É", callback_data="take_cards")
            ])
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    elif game.player_turn and game.stage == "throw_in":
        status += "üé≤ **–ú–æ–∂–µ—Ç–µ –ø—ñ–¥–∫–∏–Ω—É—Ç–∏ –∫–∞—Ä—Ç–∏**"
        valid_cards = game.get_valid_attacks(game.player_hand)
        if valid_cards and len(game.table) < 6:
            keyboard = create_card_keyboard(valid_cards, "throw")
        
        keyboard_buttons = keyboard.inline_keyboard if keyboard else []
        keyboard_buttons.append([
            InlineKeyboardButton(text="‚úÖ –ó–∞–∫—ñ–Ω—á–∏—Ç–∏ –ø—ñ–¥–∫–∏–¥–∞–Ω–Ω—è", callback_data="end_throw")
        ])
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await bot.send_message(chat_id, status, reply_markup=keyboard, parse_mode="Markdown")

async def bot_move(chat_id, game):
    """–•—ñ–¥ –±–æ—Ç–∞ (–ø—Ä–æ—Å—Ç–∏–π AI)"""
    await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –¥–ª—è —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–æ—Å—Ç—ñ
    
    if not game.player_turn and game.stage == "attack":
        # –ë–æ—Ç –∞—Ç–∞–∫—É—î
        valid_attacks = game.get_valid_attacks(game.bot_hand)
        if valid_attacks and len(game.table) < len(game.player_hand):
            # –û–±–∏—Ä–∞—î–º–æ –Ω–∞–π—Å–ª–∞–±—à—É –∫–∞—Ä—Ç—É
            card = min(valid_attacks, key=lambda x: (x.suit != game.trump_suit, x.value))
            game.bot_hand.remove(card)
            game.table.append((card, None))
            await send_game_state(chat_id, game, f"ü§ñ –ë–æ—Ç –∞—Ç–∞–∫—É—î: {card}")
            
            game.stage = "defend"
            await bot_move(chat_id, game)
        else:
            # –ë–æ—Ç –∑–∞–≤–µ—Ä—à—É—î –∞—Ç–∞–∫—É
            game.stage = "end_round"
            await end_round(chat_id, game)
    
    elif game.player_turn and game.stage == "defend":
        # –ë–æ—Ç –∑–∞—Ö–∏—â–∞—î—Ç—å—Å—è
        can_defend = True
        for i, (attack, defend) in enumerate(game.table):
            if defend is None:
                valid_defends = [c for c in game.bot_hand if game.can_beat(attack, c)]
                if valid_defends:
                    # –û–±–∏—Ä–∞—î–º–æ –Ω–∞–π—Å–ª–∞–±—à—É –ø—ñ–¥—Ö–æ–¥—è—â—É –∫–∞—Ä—Ç—É
                    card = min(valid_defends, key=lambda x: (x.suit != game.trump_suit, x.value))
                    game.bot_hand.remove(card)
                    game.table[i] = (attack, card)
                else:
                    can_defend = False
                    break
        
        if can_defend:
            await send_game_state(chat_id, game, "ü§ñ –ë–æ—Ç –≤—ñ–¥–±–∏–≤—Å—è!")
            game.stage = "throw_in"
            game.player_turn = True
        else:
            # –ë–æ—Ç –±–µ—Ä–µ –∫–∞—Ä—Ç–∏
            for attack, defend in game.table:
                game.bot_hand.append(attack)
                if defend:
                    game.bot_hand.append(defend)
            game.table = []
            game.player_turn = False
            game.stage = "attack"
            game.refill_hands()
            
            result = game.game_over()
            if result:
                await handle_game_over(chat_id, game, result)
            else:
                await send_game_state(chat_id, game, "ü§ñ –ë–æ—Ç –≤–∑—è–≤ –∫–∞—Ä—Ç–∏")
                await bot_move(chat_id, game)

async def end_round(chat_id, game):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–∞—É–Ω–¥—É"""
    game.table = []
    game.refill_hands()
    
    result = game.game_over()
    if result:
        await handle_game_over(chat_id, game, result)
    else:
        game.stage = "attack"
        if game.player_turn:
            await send_game_state(chat_id, game, "‚úÖ –†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í–∞—à —Ö—ñ–¥!")
        else:
            await send_game_state(chat_id, game, "‚úÖ –†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
            await bot_move(chat_id, game)

async def handle_game_over(chat_id, game, result):
    """–û–±—Ä–æ–±–∫–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –≥—Ä–∏"""
    if result == "player_win":
        message = "üéâ **–í—ñ—Ç–∞—î–º–æ! –í–∏ –ø–µ—Ä–µ–º–æ–≥–ª–∏!**\n\n–•–æ—á–µ—Ç–µ –∑—ñ–≥—Ä–∞—Ç–∏ —â–µ —Ä–∞–∑? /newgame"
    else:
        message = "üòî **–í–∏ –ø—Ä–æ–≥—Ä–∞–ª–∏. –ë–æ—Ç –ø–µ—Ä–µ–º—ñ–≥!**\n\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑! /newgame"
    
    await bot.send_message(chat_id, message, parse_mode="Markdown")
    del games[chat_id]

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è"""
    await message.answer(
        "üÉè –í—ñ—Ç–∞—é –≤ –≥—Ä—ñ **–î—É—Ä–∞–∫**!\n\n"
        "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /newgame –¥–ª—è –ø–æ—á–∞—Ç–∫—É –Ω–æ–≤–æ—ó –≥—Ä–∏\n"
        "/help - –ø—Ä–∞–≤–∏–ª–∞ –≥—Ä–∏",
        parse_mode="Markdown"
    )

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    """–ü—Ä–∞–≤–∏–ª–∞ –≥—Ä–∏"""
    rules = """
üÉè **–ü—Ä–∞–≤–∏–ª–∞ –≥—Ä–∏ '–î—É—Ä–∞–∫'**

**–ú–µ—Ç–∞:** –ü–æ–∑–±—É—Ç–∏—Å—è –≤—Å—ñ—Ö –∫–∞—Ä—Ç. –•—Ç–æ –∑–∞–ª–∏—à–∏—Ç—å—Å—è –∑ –∫–∞—Ä—Ç–∞–º–∏ - –ø—Ä–æ–≥—Ä–∞–≤ (–¥—É—Ä–∞–∫).

**–ü—Ä–∞–≤–∏–ª–∞:**
‚Ä¢ –ì—Ä–∞ –π–¥–µ –∫–æ–ª–æ–¥–æ—é –≤ 36 –∫–∞—Ä—Ç (–≤—ñ–¥ 6 –¥–æ —Ç—É–∑–∞)
‚Ä¢ –í–∏–∑–Ω–∞—á–∞—î—Ç—å—Å—è –∫–æ–∑–∏—Ä–Ω–∞ –º–∞—Å—Ç—å
‚Ä¢ –ê—Ç–∞–∫—É—é—á–∏–π –∫–ª–∞–¥–µ –∫–∞—Ä—Ç—É, –∑–∞—Ö–∏—Å–Ω–∏–∫ –ø–æ–≤–∏–Ω–µ–Ω –ø–æ–±–∏—Ç–∏ —ó—ó
‚Ä¢ –ö–∞—Ä—Ç–∞ –±'—î—Ç—å—Å—è —Å—Ç–∞—Ä—à–æ—é –∫–∞—Ä—Ç–æ—é —Ç—ñ—î—ó –∂ –º–∞—Å—Ç—ñ –∞–±–æ –∫–æ–∑–∏—Ä–µ–º
‚Ä¢ –ú–æ–∂–Ω–∞ –ø—ñ–¥–∫–∏–¥–∞—Ç–∏ –∫–∞—Ä—Ç–∏ —Ç–æ–≥–æ –∂ –Ω–æ–º—ñ–Ω–∞–ª—É
‚Ä¢ –Ø–∫—â–æ –∑–∞—Ö–∏—Å–Ω–∏–∫ –Ω–µ –º–æ–∂–µ –≤—ñ–¥–±–∏—Ç–∏—Å—è - –±–µ—Ä–µ –≤—Å—ñ –∫–∞—Ä—Ç–∏ –∑—ñ —Å—Ç–æ–ª—É

**–ö–æ–º–∞–Ω–¥–∏:**
/newgame - –Ω–æ–≤–∞ –≥—Ä–∞
/help - —Ü—ñ –ø—Ä–∞–≤–∏–ª–∞
"""
    await message.answer(rules, parse_mode="Markdown")

@dp.message(Command("newgame"))
async def cmd_new_game(message: types.Message):
    """–ü–æ—á–∞—Ç–æ–∫ –Ω–æ–≤–æ—ó –≥—Ä–∏"""
    chat_id = message.chat.id
    games[chat_id] = DurakGame(message.from_user.id)
    game = games[chat_id]
    
    await send_game_state(chat_id, game, "üéÆ –ù–æ–≤–∞ –≥—Ä–∞ —Ä–æ–∑–ø–æ—á–∞—Ç–∞!")
    
    if not game.player_turn:
        await bot_move(chat_id, game)

@dp.callback_query(F.data.startswith("attack_"))
async def handle_attack(callback: types.CallbackQuery):
    """–û–±—Ä–æ–±–∫–∞ –∞—Ç–∞–∫–∏ –≥—Ä–∞–≤—Ü—è"""
    chat_id = callback.message.chat.id
    if chat_id not in games:
        await callback.answer("–ì—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /newgame")
        return
    
    game = games[chat_id]
    card_idx = int(callback.data.split("_")[1])
    valid_cards = game.get_valid_attacks(game.player_hand)
    
    if card_idx < len(valid_cards):
        card = valid_cards[card_idx]
        game.player_hand.remove(card)
        game.table.append((card, None))
        
        await callback.message.delete()
        game.stage = "defend"
        game.player_turn = False
        await send_game_state(chat_id, game, f"‚öîÔ∏è –í–∏ –∞—Ç–∞–∫—É–≤–∞–ª–∏: {card}")
        await bot_move(chat_id, game)
    
    await callback.answer()

@dp.callback_query(F.data.startswith("defend_"))
async def handle_defend(callback: types.CallbackQuery):
    """–û–±—Ä–æ–±–∫–∞ –∑–∞—Ö–∏—Å—Ç—É –≥—Ä–∞–≤—Ü—è"""
    chat_id = callback.message.chat.id
    if chat_id not in games:
        await callback.answer("–ì—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
        return
    
    game = games[chat_id]
    parts = callback.data.split("_")
    table_idx = int(parts[1])
    card_idx = int(parts[2])
    
    attack_card = game.table[table_idx][0]
    valid_defends = [c for c in game.player_hand if game.can_beat(attack_card, c)]
    
    if card_idx < len(valid_defends):
        card = valid_defends[card_idx]
        game.player_hand.remove(card)
        game.table[table_idx] = (attack_card, card)
        
        await callback.message.delete()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤—Å—ñ –∫–∞—Ä—Ç–∏ –≤—ñ–¥–±–∏—Ç—ñ
        all_defended = all(defend is not None for _, defend in game.table)
        if all_defended:
            game.stage = "throw_in"
            game.player_turn = False
            await send_game_state(chat_id, game, f"üõ°Ô∏è –í–∏ –≤—ñ–¥–±–∏–ª–∏—Å—è: {card}")
            await bot_move(chat_id, game)
        else:
            await send_game_state(chat_id, game, f"üõ°Ô∏è –í—ñ–¥–±–∏—Ç–æ: {card}")
    
    await callback.answer()

@dp.callback_query(F.data == "take_cards")
async def handle_take(callback: types.CallbackQuery):
    """–ì—Ä–∞–≤–µ—Ü—å –±–µ—Ä–µ –∫–∞—Ä—Ç–∏"""
    chat_id = callback.message.chat.id
    if chat_id not in games:
        await callback.answer("–ì—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
        return
    
    game = games[chat_id]
    
    for attack, defend in game.table:
        game.player_hand.append(attack)
        if defend:
            game.player_hand.append(defend)
    
    game.table = []
    game.player_turn = True
    game.stage = "attack"
    game.refill_hands()
    
    await callback.message.delete()
    
    result = game.game_over()
    if result:
        await handle_game_over(chat_id, game, result)
    else:
        await send_game_state(chat_id, game, "üì• –í–∏ –≤–∑—è–ª–∏ –∫–∞—Ä—Ç–∏")
    
    await callback.answer()

@dp.callback_query(F.data == "end_attack")
async def handle_end_attack(callback: types.CallbackQuery):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞—Ç–∞–∫–∏"""
    chat_id = callback.message.chat.id
    if chat_id not in games:
        await callback.answer("–ì—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
        return
    
    game = games[chat_id]
    await callback.message.delete()
    
    if not game.table:
        await send_game_state(chat_id, game, "–°–ø–æ—á–∞—Ç–∫—É –∑—Ä–æ–±—ñ—Ç—å —Ö—ñ–¥!")
    else:
        game.stage = "defend"
        game.player_turn = False
        await send_game_state(chat_id, game)
        await bot_move(chat_id, game)
    
    await callback.answer()

@dp.callback_query(F.data.startswith("throw_"))
async def handle_throw(callback: types.CallbackQuery):
    """–ü—ñ–¥–∫–∏–¥–∞–Ω–Ω—è –∫–∞—Ä—Ç"""
    chat_id = callback.message.chat.id
    if chat_id not in games:
        await callback.answer("–ì—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
        return
    
    game = games[chat_id]
    card_idx = int(callback.data.split("_")[1])
    valid_cards = game.get_valid_attacks(game.player_hand)
    
    if card_idx < len(valid_cards):
        card = valid_cards[card_idx]
        game.player_hand.remove(card)
        game.table.append((card, None))
        
        await callback.message.delete()
        game.player_turn = False
        await send_game_state(chat_id, game, f"üé≤ –í–∏ –ø—ñ–¥–∫–∏–Ω—É–ª–∏: {card}")
        await bot_move(chat_id, game)
    
    await callback.answer()

@dp.callback_query(F.data == "end_throw")
async def handle_end_throw(callback: types.CallbackQuery):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—ñ–¥–∫—ñ–¥–∞–Ω–Ω—è"""
    chat_id = callback.message.chat.id
    if chat_id not in games:
        await callback.answer("–ì—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
        return
    
    game = games[chat_id]
    await callback.message.delete()
    await end_round(chat_id, game)
    await callback.answer()

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ Render.com!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())