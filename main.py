import os import random import telebot from telebot import types

============================================

DURAK UKRAINE BOT (v2) - MULTI ATTACK MODE

============================================

üá∫üá¶ –ì—Ä–∞ –î–£–†–ê–ö –ü–Ü–î–ö–ò–î–ù–ò–ô –¥–ª—è 2-4 –≥—Ä–∞–≤—Ü—ñ–≤

–§–æ—Ä–º–∞—Ç: –ø—ñ–¥–∫–∏–¥–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ–º–∞ –≥—Ä–∞–≤—Ü—è–º–∏, —á–µ—Ä–≥–æ–≤—ñ—Å—Ç—å, –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–∞—É–Ω–¥—É.

–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î pyTelegramBotAPI (polling mode, —Å—É–º—ñ—Å–Ω–∏–π —ñ–∑ Render.com)

--------------------------------------------

–§–ê–ô–õ–ò:

- main.py (—Ü–µ–π —Ñ–∞–π–ª)

- requirements.txt ‚Üí pyTelegramBotAPI==4.20.0

- Procfile ‚Üí worker: python main.py

--------------------------------------------

–ü–µ—Ä–µ–¥ –¥–µ–ø–ª–æ—î–º: –¥–æ–¥–∞–π—Ç–µ —É Render Environment variable BOT_TOKEN

============================================

BOT_TOKEN = os.getenv("BOT_TOKEN") or "PLACE_YOUR_TOKEN_HERE" bot = telebot.TeleBot(BOT_TOKEN)

=== –Ü–≥—Ä–æ–≤—ñ –¥–∞–Ω—ñ ===

games = {}  # chat_id: {players, deck, trump, field, hands, attacker_index, defender_index, status}

suits = ['‚ô†', '‚ô•', '‚ô¶', '‚ô£'] ranks = ['6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']

=== –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–æ–ª–æ–¥–∏ ===

def create_deck(): return [f"{r}{s}" for s in suits for r in ranks]

=== –†–æ–∑–¥–∞—á–∞ ===

def deal_cards(deck, count=6): hand = [] for _ in range(count): if deck: hand.append(deck.pop()) return hand

=== –ü–æ—á–∞—Ç–æ–∫ –≥—Ä–∏ ===

@bot.message_handler(commands=['start']) def start_cmd(msg): bot.send_message(msg.chat.id, "üé¥ –í—ñ—Ç–∞—é —É –î—É—Ä–∞–∫ –£–∫—Ä–∞—ó–Ω–∞!\n–ù–∞—Ç–∏—Å–Ω–∏ /join —â–æ–± –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –≥—Ä–∏.", parse_mode="Markdown")

@bot.message_handler(commands=['join']) def join_cmd(msg): chat_id = msg.chat.id user = msg.from_user.first_name

if chat_id not in games:
    games[chat_id] = {
        'players': [],
        'deck': [],
        'trump': None,
        'field': [],
        'hands': {},
        'attacker_index': 0,
        'defender_index': 1,
        'status': 'waiting'
    }

game = games[chat_id]
if user not in game['players']:
    game['players'].append(user)
    bot.send_message(chat_id, f"üë§ {user} –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ –≥—Ä–∏.")

if len(game['players']) >= 2:
    btn = types.InlineKeyboardButton("üéÆ –ü–æ—á–∞—Ç–∏ –≥—Ä—É", callback_data="begin_game")
    bot.send_message(chat_id, "–ì–æ—Ç–æ–≤—ñ?", reply_markup=types.InlineKeyboardMarkup([[btn]]))

@bot.callback_query_handler(func=lambda c: c.data == 'begin_game') def begin_game(call): chat_id = call.message.chat.id game = games.get(chat_id) if not game: return

game['deck'] = create_deck()
random.shuffle(game['deck'])
game['trump'] = game['deck'][-1][-1]  # –æ—Å—Ç–∞–Ω–Ω—è –∫–∞—Ä—Ç–∞ –≤–∏–∑–Ω–∞—á–∞—î –∫–æ–∑–∏—Ä

for player in game['players']:
    game['hands'][player] = deal_cards(game['deck'])

game['status'] = 'active'
attacker = game['players'][game['attacker_index']]
defender = game['players'][game['defender_index']]

bot.send_message(chat_id, f"üÉè –ì—Ä–∞ –ø–æ—á–∞–ª–∞—Å—è! –ö–æ–∑–∏—Ä: {game['trump']}\n–ê—Ç–∞–∫—É—î: {attacker}\n–û–±–æ—Ä–æ–Ω—è—î—Ç—å—Å—è: {defender}")
show_hand(chat_id, attacker)

=== –ü–æ–∫–∞–∑–∞—Ç–∏ —Ä—É–∫—É ===

@bot.message_handler(commands=['hand']) def show_hand_cmd(msg): show_hand(msg.chat.id, msg.from_user.first_name)

def show_hand(chat_id, player): game = games.get(chat_id) if not game: return hand = game['hands'].get(player, []) bot.send_message(chat_id, f"{player}, —Ç–≤–æ—ó –∫–∞—Ä—Ç–∏: {', '.join(hand)}")

=== –•–æ–¥–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ ===

def make_turn_kb(attacker, defender): kb = types.InlineKeyboardMarkup() kb.add( types.InlineKeyboardButton("üó°Ô∏è –ü—ñ–¥–∫–∏–Ω—É—Ç–∏", callback_data=f"attack_{attacker}"), types.InlineKeyboardButton("üõ°Ô∏è –ó–∞—Ö–∏—Å—Ç–∏—Ç–∏—Å—å", callback_data=f"defend_{defender}"), types.InlineKeyboardButton("üôÖ‚Äç‚ôÇÔ∏è –í–∑—è—Ç–∏", callback_data=f"take_{defender}"), types.InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ö—ñ–¥", callback_data="end_turn") ) return kb

=== –û–±—Ä–æ–±–∫–∞ –ø—ñ–¥–∫–∏–¥–∞–Ω–Ω—è ===

@bot.callback_query_handler(func=lambda c: c.data.startswith('attack_')) def attack_cb(call): chat_id = call.message.chat.id player = call.data.split('_')[1] game = games.get(chat_id) if not game or game['status'] != 'active': return

if player not in game['players']:
    bot.answer_callback_query(call.id, "–¢–∏ –Ω–µ —É –≥—Ä—ñ!")
    return

if player == game['players'][game['defender_index']]:
    bot.answer_callback_query(call.id, "–¢–∏ –æ–±–æ—Ä–æ–Ω—è—î—à—Å—è!")
    return

show_hand(chat_id, player)
bot.send_message(chat_id, f"{player}, —è–∫—É –∫–∞—Ä—Ç—É —Ö–æ—á–µ—à –ø—ñ–¥–∫–∏–Ω—É—Ç–∏? –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 9‚ô†)")

=== –í–≤–µ–¥–µ–Ω–Ω—è –∫–∞—Ä—Ç–∏ ===

@bot.message_handler(func=lambda m: any(s in m.text for s in suits)) def handle_card_input(msg): chat_id = msg.chat.id player = msg.from_user.first_name game = games.get(chat_id) if not game or game['status'] != 'active': return

card = msg.text.strip()
if card not in game['hands'].get(player, []):
    bot.send_message(chat_id, "–£ —Ç–µ–±–µ –Ω–µ–º–∞—î —Ç–∞–∫–æ—ó –∫–∞—Ä—Ç–∏!")
    return

game['hands'][player].remove(card)
game['field'].append({'player': player, 'card': card})
bot.send_message(chat_id, f"{player} –ø—ñ–¥–∫–∏–Ω—É–≤ {card}.")

=== –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ö–æ–¥—É ===

@bot.callback_query_handler(func=lambda c: c.data == 'end_turn') def end_turn(call): chat_id = call.message.chat.id game = games.get(chat_id) if not game: return

bot.send_message(chat_id, f"–•—ñ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü–æ–ª–µ: {', '.join([x['card'] for x in game['field']])}")

# –æ—á–∏—â–µ–Ω–Ω—è –ø–æ–ª—è, –ø–µ—Ä–µ—Ö—ñ–¥ —Ä–æ–ª–µ–π
game['field'] = []
game['attacker_index'] = (game['attacker_index'] + 1) % len(game['players'])
game['defender_index'] = (game['attacker_index'] + 1) % len(game['players'])

next_attacker = game['players'][game['attacker_index']]
next_defender = game['players'][game['defender_index']]

bot.send_message(chat_id, f"‚û°Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∏–π —Ö—ñ–¥: –∞—Ç–∞–∫—É—î {next_attacker}, –æ–±–æ—Ä–æ–Ω—è—î—Ç—å—Å—è {next_defender}")

bot.infinity_polling()