""" DurakUkraineBot ‚Äî main.py

–ü–æ—Ç—Ä—ñ–±–Ω—ñ —Ñ–∞–π–ª–∏ —Ç–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó (–≤–∫–ª–∞–¥–∏ —É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π):

requirements.txt: pyTelegramBotAPI==4.20.0

Procfile: worker: python main.py


–ü–µ—Ä–µ–¥ –¥–µ–ø–ª–æ—î–º –Ω–∞ Render.com –¥–æ–¥–∞–π—Ç–µ –≤ Environment variables:

BOT_TOKEN = <—Ç–æ–∫–µ–Ω –≤—ñ–¥ @BotFather>


--- –ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å --- –¶–µ–π —Ñ–∞–π–ª —Ä–µ–∞–ª—ñ–∑—É—î Telegram-–±–æ—Ç–∞ –¥–ª—è –≥—Ä–∏ "–î—É—Ä–∞–∫ (–ø—ñ–¥–∫–∏–¥–Ω–∏–π)" –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é:

—Ä–µ–∂–∏–º—ñ–≤: 1 –Ω–∞ 1 —Ç–∞ –º—É–ª—å—Ç–∏ (2-4 –≥—Ä–∞–≤—Ü—ñ)

—ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –≥—Ä–∏ (–ø–æ–∫–∞–∑ —Ä—É–∫–∏, –ø—ñ–¥–∫–∏–¥–∞–Ω–Ω—è, –∑–∞—Ö–∏—Å—Ç, –≤–∑—è—Ç–∏)

–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é

–∫–∞—Ä—Ç–∏ —è–∫ —Ç–µ–∫—Å—Ç: '10‚ô†', 'A‚ô•' —ñ —Ç.–¥.


--- –û–±–º–µ–∂–µ–Ω–Ω—è/–ü—Ä–∏–º—ñ—Ç–∫–∏ ---

–ü—Ä–∞–≤–∏–ª–∞ —Å–ø—Ä–æ—â–µ–Ω—ñ –¥–ª—è –∑—Ä–æ–∑—É–º—ñ–ª–æ—Å—Ç—ñ: —É —Ö–æ–¥—É –∞—Ç–∞–∫—É—î —Ç—ñ–ª—å–∫–∏ –æ–¥–∏–Ω –≥—Ä–∞–≤–µ—Ü—å; —ñ–Ω—à—ñ –≥—Ä–∞–≤—Ü—ñ (–æ–∫—Ä—ñ–º –∑–∞—Ö–∏—Å–Ω–∏–∫–∞) –Ω–µ –ø—ñ–¥–∫–∏–¥–∞—é—Ç—å –æ–¥–Ω–æ—á–∞—Å–Ω–æ.

–ü–æ–≤–Ω–∞ —ñ–¥–µ–∞–ª—å–Ω–∞ —Å–∏–º—É–ª—è—Ü—ñ—è –ø—ñ–¥–∫–∏–¥–Ω–æ–≥–æ (–∫–æ–ª–∏ –∫—ñ–ª—å–∫–∞ –∞—Ç–∞–∫—É—é—á–∏—Ö –ø—ñ–¥–∫–∏–¥–∞—é—Ç—å –≤ –æ–¥–∏–Ω —Ö—ñ–¥) –º–æ–∂–µ –±—É—Ç–∏ –¥–æ–¥–∞–Ω–∞ –≤ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ.


"""

import os import random import logging import telebot from telebot import types

–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è

logging.basicConfig(level=logging.INFO) logger = logging.getLogger(name)

–¢–æ–∫–µ–Ω –∑ ENV

BOT_TOKEN = os.getenv('BOT_TOKEN', 'YOUR_TELEGRAM_BOT_TOKEN') bot = telebot.TeleBot(BOT_TOKEN, parse_mode=None)

–ö–∞—Ä—Ç–∏

SUITS = ['‚ô†', '‚ô•', '‚ô¶', '‚ô£'] RANKS = ['6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'] MAX_HAND = 6

–Ü–≥—Ä–∏ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –ø–æ chat_id

games = {}

--- –£—Ç–∏–ª—ñ—Ç–∏ –¥–ª—è –∫–∞—Ä—Ç ---

def create_deck(): return [r + s for s in SUITS for r in RANKS]

def card_rank(card): # –ø–æ–≤–µ—Ä—Ç–∞—î —ñ–Ω–¥–µ–∫—Å —Ä–∞–Ω–≥—É r = card[:-1] return RANKS.index(r)

def card_suit(card): return card[-1]

--- –ö–ª–∞—Å –≥—Ä–∏ ---

class DurakGame: def init(self, chat_id, max_players=2): self.chat_id = chat_id self.players = []  # —Å–ø–∏—Å–æ–∫ dict: {id, name, hand} self.max_players = max_players self.deck = [] self.trump = None self.trump_card = None self.attacker_idx = 0 self.defender_idx = 1 self.table = []  # —Å–ø–∏—Å–æ–∫ –ø–∞—Ä (attack_card, defend_card_or_None) self.started = False

def add_player(self, user):
    if self.started:
        return False, '–ì—Ä–∞ –≤–∂–µ –ø–æ—á–∞–ª–∞—Å—å'
    if any(p['id'] == user.id for p in self.players):
        return False, '–¢–∏ –≤–∂–µ –≤ –ª–æ–±—ñ'
    if len(self.players) >= self.max_players:
        return False, '–õ–æ–±—ñ –ø–æ–≤–Ω–µ'
    self.players.append({'id': user.id, 'name': user.first_name, 'hand': []})
    return True, '–î–æ–¥–∞–Ω–æ'

def remove_player(self, user_id):
    self.players = [p for p in self.players if p['id'] != user_id]

def start(self):
    # —Å—Ç–∞—Ä—Ç –≥—Ä–∏ ‚Äî —Ç–∞—Å—É—î, —Ä–æ–∑–¥–∞—î, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î –∫–æ–∑–∏—Ä
    self.deck = create_deck()
    random.shuffle(self.deck)
    # –æ—Å—Ç–∞–Ω–Ω—è –∫–∞—Ä—Ç–∞ –≤–∏–∑–Ω–∞—á–∞—î –∫–æ–∑–∏—Ä (–≤–∏–±–µ—Ä–µ–º–æ –æ—Å—Ç–∞–Ω–Ω—é)
    self.trump_card = self.deck[-1]
    self.trump = card_suit(self.trump_card)

    # —Ä–æ–∑–¥–∞—Ç–∏ –ø–æ MAX_HAND
    for _ in range(MAX_HAND):
        for p in self.players:
            if self.deck:
                p['hand'].append(self.deck.pop(0))
    self.started = True
    self.attacker_idx = 0
    self.defender_idx = 1 % len(self.players)
    self.table = []

def get_player_by_id(self, user_id):
    for p in self.players:
        if p['id'] == user_id:
            return p
    return None

def deal_to_player(self, p):
    while len(p['hand']) < MAX_HAND and self.deck:
        p['hand'].append(self.deck.pop(0))

def refill_all(self):
    # –ø—ñ—Å–ª—è —Ö–æ–¥—É, –∫–æ–∂–Ω–æ–º—É –ø–æ —á–µ—Ä–∑—ñ –¥–æ–±–∏—Ä–∞—î–º–æ –¥–æ 6
    order = list(range(self.attacker_idx, self.attacker_idx + len(self.players)))
    for i in order:
        idx = i % len(self.players)
        self.deal_to_player(self.players[idx])

def next_turn(self):
    # –ø–µ—Ä–µ—Å—É–Ω—É—Ç–∏ —ñ–Ω–¥–µ–∫—Å–∏
    self.attacker_idx = (self.attacker_idx + 1) % len(self.players)
    self.defender_idx = (self.attacker_idx + 1) % len(self.players)
    self.table = []

def is_player_turn_attacker(self, user_id):
    return self.players[self.attacker_idx]['id'] == user_id

def is_player_turn_defender(self, user_id):
    return self.players[self.defender_idx]['id'] == user_id

def play_attack(self, user_id, card):
    # –∞—Ç–∞–∫—É–≤–∞—Ç–∏ ‚Äî –¥–æ–¥–∞—î–º–æ –∫–∞—Ä—Ç—É –Ω–∞ —Å—Ç—ñ–ª
    p = self.get_player_by_id(user_id)
    if not p:
        return False, '–¢–∏ –Ω–µ –≤ –≥—Ä—ñ'
    if not self.is_player_turn_attacker(user_id):
        return False, '–ù–µ —Ç–≤—ñ–π —Ö—ñ–¥ –∞—Ç–∞–∫—É–≤–∞—Ç–∏'
    if card not in p['hand']:
        return False, '–£ —Ç–µ–±–µ –Ω–µ–º–∞—î —Ç–∞–∫–æ—ó –∫–∞—Ä—Ç–∏'
    # –æ–±–º–µ–∂–µ–Ω–Ω—è: –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞—Ç–∞–∫ –Ω–µ –±—ñ–ª—å—à–µ MAX_HAND —Ç–∞ –Ω–µ –±—ñ–ª—å—à–µ –Ω—ñ–∂ —É –∑–∞—Ö–∏—Å–Ω–∏–∫–∞
    if len(self.table) >= MAX_HAND:
        return False, '–ú–∞–∫—Å–∏–º—É–º –∞—Ç–∞–∫ –¥–æ—Å—è–≥–Ω—É—Ç–æ'
    p['hand'].remove(card)
    self.table.append([card, None])
    return True, '–ó—ñ–≥—Ä–∞–Ω–æ'

def play_defend(self, user_id, attack_card, defend_card):
    # –∑–∞—Ö–∏—Å–Ω–∏–∫ –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è –ø–æ–±–∏—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –∫–∞—Ä—Ç—É
    if not self.is_player_turn_defender(user_id):
        return False, '–¢–∏ –Ω–µ –∑–∞—Ö–∏—Å–Ω–∏–∫'
    p = self.get_player_by_id(user_id)
    if defend_card not in p['hand']:
        return False, '–£ —Ç–µ–±–µ –Ω–µ–º–∞—î —Ç–∞–∫–æ—ó –∫–∞—Ä—Ç–∏'
    # –∑–Ω–∞–π—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —Ä—è–¥–æ–∫ —É —Ç–∞–±–ª–∏—Ü—ñ
    for row in self.table:
        if row[0] == attack_card and row[1] is None:
            # –º–æ–∂–Ω–∞ –ø–æ–±–∏—Ç–∏: —è–∫—â–æ —Ç–∞ –∂ –º–∞—Å—Ç—å —ñ –±—ñ–ª—å—à–∏–π —Ä–∞–Ω–≥ –∞–±–æ –∫–æ–∑–∏—Ä –ø—Ä–æ—Ç–∏ –Ω–µ–∫–æ–∑–∏—Ä–∫–∏
            if can_beat(attack_card, defend_card, self.trump):
                p['hand'].remove(defend_card)
                row[1] = defend_card
                return True, '–ü–æ–±–∏—Ç–æ'
            else:
                return False, '–¶—è –∫–∞—Ä—Ç–∞ –Ω–µ –±'—î'
    return False, '–ù–∞ —Å—Ç–æ–ª—ñ –Ω–µ–º–∞—î —Ç–∞–∫–æ—ó –∞—Ç–∞–∫–∏ –∞–±–æ –≤–æ–Ω–∞ –≤–∂–µ –ø–æ–±–∏—Ç–∞'

def take_cards(self, user_id):
    # –∑–∞—Ö–∏—Å–Ω–∏–∫ –±–µ—Ä–µ –≤—Å—ñ –∫–∞—Ä—Ç–∏ –∑—ñ —Å—Ç–æ–ª—É
    if not self.is_player_turn_defender(user_id):
        return False, '–¢–∏ –Ω–µ –∑–∞—Ö–∏—Å–Ω–∏–∫'
    p = self.get_player_by_id(user_id)
    # –∑–∞–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –∫–∞—Ä—Ç–∏, —è–∫—ñ –Ω–∞—Ä–∞–∑—ñ –Ω–∞ —Å—Ç–æ–ª—ñ (–∞—Ç–∞–∫—É—é—á—ñ —ñ –æ–±–æ—Ä–æ–Ω–Ω—ñ)
    for a, d in self.table:
        p['hand'].append(a)
        if d:
            p['hand'].append(d)
    self.table = []
    # –∑–∞—Ö–∏—Å–Ω–∏–∫ –¥–æ–±–∏—Ä–∞—î –ø—ñ—Å–ª—è –≤–∑—è—Ç—Ç—è (—Ä–∞–∑–æ–º –∑ —ñ–Ω—à–∏–º–∏ –≥—Ä–∞–≤—Ü—è–º–∏ ‚Äî –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ö–æ–¥—É –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è refill)
    return True, '–í–∑—è–≤ –∫–∞—Ä—Ç–∏'

def all_attacks_beaten(self):
    # –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –≤—Å—ñ –∞—Ç–∞–∫–æ–≤–∞–Ω—ñ –∫–∞—Ä—Ç–∏ –ø–æ–±–∏—Ç—ñ
    if not self.table:
        return True
    return all(d is not None for a, d in self.table)

def get_table_text(self):
    if not self.table:
        return '–ü–æ—Ä–æ–∂–Ω—ñ–π —Å—Ç—ñ–ª.'
    rows = []
    for a, d in self.table:
        if d:
            rows.append(f"{a} ‚Üí {d}")
        else:
            rows.append(f"{a} ‚Üí _")
    return '\n'.join(rows)

--- –õ–æ–≥—ñ–∫–∞ –±–æ—é –∫–∞—Ä—Ç ---

def can_beat(attack_card, defend_card, trump): # –ø–æ–≤–µ—Ä—Ç–∞—î True —è–∫—â–æ defend_card –±'—î attack_card a_rank = card_rank(attack_card) d_rank = card_rank(defend_card) a_suit = card_suit(attack_card) d_suit = card_suit(defend_card) if d_suit == a_suit and d_rank > a_rank: return True # —è–∫—â–æ –∑–∞—Ö–∏—Å–Ω–∏–∫ –∫–æ–∑–∏—Ä —ñ –∞—Ç–∞–∫—É—é—á–∏–π –Ω–µ –∫–æ–∑–∏—Ä if d_suit == trump and a_suit != trump: return True return False

--- –•–µ–ª–ø–µ—Ä–∏ –¥–ª—è UI ---

def hand_keyboard(player): kb = types.InlineKeyboardMarkup() # –∫–æ–∂–Ω–∞ –∫–∞—Ä—Ç–∞ ‚Äî –æ–∫—Ä–µ–º–∞ –∫–Ω–æ–ø–∫–∞ buttons = [types.InlineKeyboardButton(text=c, callback_data=f'card:{c}') for c in player['hand']] # —Ä–æ–∑–±–∏—Ç–∏ –Ω–∞ —Ä—è–¥–∫–∏ –ø–æ 4 row = [] for i, b in enumerate(buttons, 1): row.append(b) if i % 4 == 0: kb.row(*row) row = [] if row: kb.row(*row) return kb

def action_keyboard(game: DurakGame, user_id): kb = types.InlineKeyboardMarkup() # –î–æ—Å—Ç—É–ø–Ω—ñ –¥—ñ—ó –∑–∞–ª–µ–∂–∞—Ç—å –≤—ñ–¥ —Ä–æ–ª—ñ if game.is_player_turn_attacker(user_id): kb.add(types.InlineKeyboardButton('–ü—ñ–¥–∫–∏–Ω—É—Ç–∏ –∫–∞—Ä—Ç—É', callback_data='action:attack')) kb.add(types.InlineKeyboardButton('–ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ö—ñ–¥', callback_data='action:end_attack')) elif game.is_player_turn_defender(user_id): kb.add(types.InlineKeyboardButton('–ó–∞—Ö–∏—â–∞—Ç–∏—Å—å (–≤–∏–±—Ä–∞—Ç–∏ –∫–∞—Ä—Ç—É)', callback_data='action:defend')) kb.add(types.InlineKeyboardButton('–í–∑—è—Ç–∏ –∫–∞—Ä—Ç–∏', callback_data='action:take')) else: kb.add(types.InlineKeyboardButton('–î–∏–≤–∏—Ç–∏—Å—å —Å–≤–æ—é —Ä—É–∫—É', callback_data='action:hand')) return kb

--- –ö–æ–º–∞–Ω–¥–∏ ---

@bot.message_handler(commands=['start']) def cmd_start(message): chat_id = message.chat.id # —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –≥—Ä—É-–ª–æ–±—ñ –∑ –¥–µ—Ñ–æ–ª—Ç–Ω–∏–º –º–∞–∫—Å –≥—Ä–∞–≤—Ü—ñ–≤ =2 (–±—É–¥–µ–º–æ –¥–∞–≤–∞—Ç–∏ –≤–∏–±—ñ—Ä) games[chat_id] = DurakGame(chat_id, max_players=2) bot.send_message(chat_id, 'üÉè –õ–æ–±—ñ —Å—Ç–≤–æ—Ä–µ–Ω–æ!\n–ù–∞–ø–∏—à—ñ—Ç—å /join —â–æ–± –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—å.\n\n–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –≥—Ä—É –¥–æ 4 –≥—Ä–∞–≤—Ü—ñ–≤ - –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /setmode 4')

@bot.message_handler(commands=['setmode']) def cmd_setmode(message): chat_id = message.chat.id args = message.text.split() if len(args) < 2: bot.send_message(chat_id, '–í–∫–∞–∂—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥—Ä–∞–≤—Ü—ñ–≤: /setmode 2 –∞–±–æ /setmode 4') return try: n = int(args[1]) if n not in (2, 3, 4): raise ValueError except: bot.send_message(chat_id, '–î–æ–ø—É—Å—Ç–∏–º—ñ –∑–Ω–∞—á–µ–Ω–Ω—è: 2, 3, 4') return g = games.get(chat_id) if not g: g = DurakGame(chat_id, max_players=n) games[chat_id] = g else: if g.started: bot.send_message(chat_id, '–ì—Ä–∞ –≤–∂–µ –ø–æ—á–∞–ª–∞—Å—å ‚Äî –Ω–µ –º–æ–∂–Ω–∞ –º—ñ–Ω—è—Ç–∏ —Ä–µ–∂–∏–º') return g.max_players = n bot.send_message(chat_id, f'–†–µ–∂–∏–º –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: –¥–æ {n} –≥—Ä–∞–≤—Ü—ñ–≤')

@bot.message_handler(commands=['join']) def cmd_join(message): chat_id = message.chat.id user = message.from_user g = games.get(chat_id) if not g: g = DurakGame(chat_id, max_players=2) games[chat_id] = g ok, msg = g.add_player(user) if not ok: bot.send_message(chat_id, msg) return bot.send_message(chat_id, f'‚úÖ {user.first_name} –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è. ({len(g.players)}/{g.max_players})') if len(g.players) == g.max_players: bot.send_message(chat_id, '–õ–æ–±—ñ –ø–æ–≤–Ω–µ ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /begin —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –≥—Ä—É –∞–±–æ —á–µ–∫–∞—Ç–∏ –ø–æ–∫–∏ —Ö—Ç–æ—Å—å —ñ–Ω—à–∏–π –Ω–µ –ø—ñ–¥–∫–ª—é—á–∏—Ç—å—Å—è')

@bot.message_handler(commands=['leave']) def cmd_leave(message): chat_id = message.chat.id user = message.from_user g = games.get(chat_id) if not g: bot.send_message(chat_id, '–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ª–æ–±—ñ') return g.remove_player(user.id) bot.send_message(chat_id, f'{user.first_name} –≤–∏–π—à–æ–≤ –∑ –ª–æ–±—ñ')

@bot.message_handler(commands=['begin']) def cmd_begin(message): chat_id = message.chat.id g = games.get(chat_id) if not g: bot.send_message(chat_id, '–°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –ª–æ–±—ñ /start') return if len(g.players) < 2: bot.send_message(chat_id, '–ü–æ—Ç—Ä—ñ–±–Ω–æ —â–æ–Ω–∞–π–º–µ–Ω—à–µ 2 –≥—Ä–∞–≤—Ü—ñ —â–æ–± –ø–æ—á–∞—Ç–∏') return g.start() # –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ —á–∞—Ç bot.send_message(chat_id, f"üéÆ –ì—Ä–∞ –ø–æ—á–∞–ª–∞—Å—å! –ö–æ–∑–∏—Ä: {g.trump_card}.\n–ê—Ç–∞–∫—É—î: {g.players[g.attacker_idx]['name']} ‚Äî –ó–∞—Ö–∏—Å–Ω–∏–∫: {g.players[g.defender_idx]['name']}") # —Ä–æ–∑—ñ—Å–ª–∞—Ç–∏ —Ä—É–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ for p in g.players: try: bot.send_message(p['id'], f"üÉè –¢–≤–æ—è —Ä—É–∫–∞: {', '.join(p['hand'])}") bot.send_message(p['id'], '–í–∏–±–µ—Ä–∏ –¥—ñ—é:', reply_markup=action_keyboard(g, p['id'])) except Exception as e: logger.exception('–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø—Ä–∏–≤–∞—Ç–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è')

@bot.message_handler(commands=['hand']) def cmd_hand(message): # –ø–æ–∫–∞–∑–∞—Ç–∏ —Ä—É–∫—É –≥—Ä–∞–≤—Ü—é (–ø—Ä–∏–≤–∞—Ç–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è) user = message.from_user for g in games.values(): p = g.get_player_by_id(user.id) if p: try: bot.send_message(user.id, f"üÉè –¢–≤–æ—è —Ä—É–∫–∞: {', '.join(p['hand'])}", reply_markup=hand_keyboard(p)) except: bot.send_message(message.chat.id, '–ù–µ –≤–¥–∞–ª–æ—Å—å –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –æ—Å–æ–±–∏—Å—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚Äî –∑–∞–ø—É—Å—Ç—ñ—Ç—å —á–∞—Ç –∑—ñ –º–Ω–æ—é —ñ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Start') return bot.send_message(message.chat.id, '–¢–∏ –Ω–µ –≤ –≥—Ä—ñ')

--- –û–±—Ä–æ–±–∫–∞ callback (—ñ–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫) ---

@bot.callback_query_handler(func=lambda c: True) def callback_handler(call: types.CallbackQuery): data = call.data user = call.from_user chat_id = call.message.chat.id

# –∑–Ω–∞–π—Ç–∏ –≥—Ä—É, –≤ —è–∫—ñ–π –±–µ—Ä–µ —É—á–∞—Å—Ç—å —Ü–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
game = None
for g in games.values():
    if g.get_player_by_id(user.id):
        game = g
        break
if not game:
    bot.answer_callback_query(call.id, '–¢–∏ –Ω–µ –≤ –≥—Ä—ñ –∞–±–æ —Å–µ—Å—ñ—è –∑–∞–∫—ñ–Ω—á–µ–Ω–∞')
    return

try:
    if data.startswith('card:'):
        card = data.split(':', 1)[1]
        # –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–æ–ª—ñ ‚Äî –∞–±–æ –∞—Ç–∞–∫—É—î–º–æ –∞–±–æ –∑–∞—Ö–∏—â–∞—î–º–æ
        if game.is_player_turn_attacker(user.id):
            ok, msg = game.play_attack(user.id, card)
            bot.answer_callback_query(call.id, msg)
            # –æ–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç—ñ
            bot.send_message(game.chat_id, f"üü¢ {user.first_name} –∞—Ç–∞–∫—É–≤–∞–≤ –∫–∞—Ä—Ç–æ—é {card}\n\n–°—Ç—ñ–ª:\n{game.get_table_text()}")
            # –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –≤—Å—ñ—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤
            notify_players_after_action(game)
        elif game.is_player_turn_defender(user.id):
            # —è–∫—â–æ –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–∞—Ä—Ç—É –ø—ñ–¥ —á–∞—Å –∑–∞—Ö–∏—Å—Ç—É ‚Äî —Ç—Ä–µ–±–∞ –≤–∫–∞–∑–∞—Ç–∏ —è–∫—É –∞—Ç–∞–∫—É –±'—î–º–æ
            # —è–∫—â–æ —î –Ω–µ–∑–∞–∫—Ä–∏—Ç—ñ –∞—Ç–∞–∫–∏ ‚Äî –¥–æ–∑–≤–æ–ª–∏–º–æ –±–∏—Ç–∏ –ø–µ—Ä—à—É –Ω–µ–∑–∞–∫—Ä–∏—Ç—É
            pending = None
            for a, d in game.table:
                if d is None:
                    pending = a
                    break
            if not pending:
                bot.answer_callback_query(call.id, '–ù–µ–º–∞—î –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –∞—Ç–∞–∫ –¥–ª—è –ø–æ–±–∏—Ç—Ç—è')
                return
            ok, msg = game.play_defend(user.id, pending, card)
            bot.answer_callback_query(call.id, msg)
            if ok:
                bot.send_message(game.chat_id, f"üõ°Ô∏è {user.first_name} –ø–æ–±–∏–≤ {pending} –∫–∞—Ä—Ço—é {card}\n\n–°—Ç—ñ–ª:\n{game.get_table_text()}")
                notify_players_after_action(game)
            else:
                # –ù—ñ—á–æ–≥–æ –Ω–µ –∑–º—ñ–Ω—é—î–º–æ
                pass
        else:
            bot.answer_callback_query(call.id, '–ó–∞—Ä–∞–∑ –Ω–µ —Ç–≤–æ—è –¥—ñ—è –¥–ª—è —Ü—ñ—î—ó –∫–Ω–æ–ø–∫–∏')

    elif data.startswith('action:'):
        action = data.split(':', 1)[1]
        if action == 'attack':
            # –ø–æ–∫–∞–∑–∞—Ç–∏ —Ä—É–∫—É –∞—Ç–∞–∫—É—é—á–æ–º—É –¥–ª—è –≤–∏–±–æ—Ä—É –∫–∞—Ä—Ç–∏
            p = game.get_player_by_id(user.id)
            bot.answer_callback_query(call.id, '–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ä—Ç—É –¥–ª—è –∞—Ç–∞–∫–∏')
            bot.send_message(user.id, f"üÉè –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ä—Ç—É –¥–ª—è –∞—Ç–∞–∫–∏: {', '.join(p['hand'])}", reply_markup=hand_keyboard(p))
        elif action == 'defend':
            p = game.get_player_by_id(user.id)
            bot.answer_callback_query(call.id, '–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ä—Ç—É –¥–ª—è –∑–∞—Ö–∏—Å—Ç—É')
            bot.send_message(user.id, f"üÉè –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ä—Ç—É –¥–ª—è –∑–∞—Ö–∏—Å—Ç—É: {', '.join(p['hand'])}", reply_markup=hand_keyboard(p))
        elif action == 'take':
            ok, msg = game.take_cards(user.id)
            bot.answer_callback_query(call.id, msg)
            if ok:
                bot.send_message(game.chat_id, f"üü† {user.first_name} –≤–∑—è–≤(–ª–∞) –∫–∞—Ä—Ç–∏ –∑—ñ —Å—Ç–æ–ª—É.")
                # –ø—ñ—Å–ª—è –≤–∑—è—Ç—Ç—è ‚Äî –¥–æ–±–∏—Ä–∞—î–º–æ –∫–∞—Ä—Ç–∏ —ñ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ö–æ–¥—É
                game.refill_all()
                game.next_turn()
                notify_players_after_action(game)
        elif action == 'end_attack':
            # –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞—Ç–∞–∫–∏ ‚Äî —è–∫—â–æ –≤—Å—ñ –∫–∞—Ä—Ç–∏ –ø–æ–±–∏—Ç—ñ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ; —ñ–Ω–∞–∫—à–µ ‚Äî –∑–∞—Ö–∏—Å–Ω–∏–∫ –º–∞—î –≤–∏–±—ñ—Ä
            if game.all_attacks_beaten():
                bot.answer_callback_query(call.id, '–•—ñ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ‚Äî –≤—Å—ñ –∞—Ç–∞–∫–∏ –ø–æ–±–∏—Ç—ñ')
                bot.send_message(game.chat_id, '–•—ñ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ‚Äî –≤—Å—ñ –∞—Ç–∞–∫–∏ –ø–æ–±–∏—Ç—ñ. –î–æ–±—ñ—Ä –∫–∞—Ä—Ç...')
                game.refill_all()
                game.next_turn()
                notify_players_after_action(game)
            else:
                bot.answer_callback_query(call.id, '–ù–µ –≤—Å—ñ –∞—Ç–∞–∫–∏ –ø–æ–±–∏—Ç—ñ ‚Äî –∑–∞—Ö–∏—Å–Ω–∏–∫ –º–æ–∂–µ –±—Ä–∞—Ç–∏ –∞–±–æ –¥–æ–±–∏–≤–∞—Ç–∏')
        elif action == 'hand':
            p = game.get_player_by_id(user.id)
            bot.answer_callback_query(call.id, '–í—ñ–¥–∫—Ä–∏–≤–∞—é —Ä—É–∫—É')
            bot.send_message(user.id, f"üÉè –¢–≤–æ—è —Ä—É–∫–∞: {', '.join(p['hand'])}", reply_markup=hand_keyboard(p))
        else:
            bot.answer_callback_query(call.id, '–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è')

except Exception as e:
    logger.exception('–ü–æ–º–∏–ª–∫–∞ –≤ callback')
    bot.answer_callback_query(call.id, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞')

def notify_players_after_action(game: DurakGame): # –û–Ω–æ–≤–∏—Ç–∏ –≤—Å—ñ–º –ø—Ä–∏–≤–∞—Ç–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ä—É–∫—É —ñ –æ—Å–Ω–æ–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É —á–∞—Ç—ñ try: # –æ—Å–Ω–æ–≤–Ω–∏–π —Å—Ç–∞—Ç—É—Å —É –≥—Ä—É–ø—ñ status = f"–°—Ç—ñ–ª:\n{game.get_table_text()}\n\n–ö–æ–∑–∏—Ä: {game.trump_card}\n–ê—Ç–∞–∫—É—î: {game.players[game.attacker_idx]['name']}\n–ó–∞—Ö–∏—Å–Ω–∏–∫: {game.players[game.defender_idx]['name']}" bot.send_message(game.chat_id, status) except Exception: pass

for p in game.players:
    try:
        hand_txt = f"üÉè –¢–≤–æ—è —Ä—É–∫–∞: {', '.join(p['hand'])}\n\n–°—Ç—ñ–ª:\n{game.get_table_text()}"
        bot.send_message(p['id'], hand_txt, reply_markup=action_keyboard(game, p['id']))
    except Exception:
        # —è–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø—Ä–∏–≤–∞—Ç–Ω–µ ‚Äî —ñ–≥–Ω–æ—Ä—É—î–º–æ
        pass

–ó–∞–ø—É—Å–∫

if name == 'main': logger.info('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ (polling)') try: bot.infinity_polling(timeout=60, long_polling_timeout=60) except KeyboardInterrupt: logger.info('–ó—É–ø–∏–Ω–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º') except Exception: logger.exception('–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞')